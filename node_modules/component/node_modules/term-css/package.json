{
  "name": "term-css",
  "version": "1.0.0",
  "description": "style terminal output with CSS!",
  "keywords": [
    "css",
    "stylesheet",
    "term",
    "console",
    "ansi",
    "escape"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "dependencies": {
    "css": "1.0.1"
  },
  "main": "index",
  "readme": "\n# term-css\n\n  Terminal CSS styling using [node-css](https://github.com/visionmedia/node-css).\n\n## Installation\n\n    $ npm install term-css\n\n## Example\n\njs:\n\n```js\n\nvar css = require('term-css')\n  , fs = require('fs')\n  , style = fs.readFileSync('pet.css', 'utf8');\n\nvar tobi = {\n  name: 'tobi',\n  species: 'ferret',\n  age: 2\n};\n\nvar loki = {\n  name: 'loki',\n  species: 'ferret',\n  age: 1\n};\n\nvar fn = css.compile('  {name} is a {species}, he is {age} years old', style);\n\nconsole.log();\nconsole.log(fn(tobi));\nconsole.log(fn(loki));\nconsole.log();\n\n```\n\ncss:\n\n```css\nname {\n  color: cyan;\n  font-weight: bold;\n}\n\nspecies {\n  color: white;\n  font-weight: bold;\n  background: black;\n}\n\nage {\n  color: red;\n  text-decoration: underline;\n}\n```\n\noutput:\n\n  ![](http://f.cl.ly/items/0Q0q2b1H1c1u0x0V0o0m/Screen%20Shot%202012-07-26%20at%208.03.34%20AM.png)\n\n## CSS properties\n\n  The following CSS properties / values are understood:\n  \n  - `text-decoration: <underline|inverse>`\n  - `font-weight: <bold>`\n  - `font-style: <italic>`\n  - `color: <grey|gray|black|blue|cyan|green|red|magenta|yellow>`\n  - `background: <grey|gray|black|blue|cyan|green|red|magenta|yellow>`\n\n## Substitution\n\n  term-css substitutes tokens with properties in the object passed,\n  for example `{name}` will access `{ name: \"tobi\" }`, whereas \n  `{labels.visits}` will access `{ labels: { visits: 'Visits' } }`.\n\n  For styling purposes you may also assign a classname, for example\n  instead of styling \"labels.visits\", \"labels.uptime\" separately,\n  you may use `{label labels.visits}` and `{label labels.uptime}`.\n\n## Omitting styling\n\n To output a plain string but use the same format, simply omit the css\n string from the `.compile(fmt, style)` call.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "_id": "term-css@1.0.0",
  "_from": "term-css@1.0.0"
}
